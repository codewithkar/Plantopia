<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Orders Management</title>
    <link rel="stylesheet" href="/tailwindcss/output.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="mybg-green">

    <%- include('../partials/sidebar') %>

    <div class="p-4 sm:ml-64">
        <div class="p-4 mt-14">
            <!-- Page Header -->
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-gray-300">Orders Management</h2>
            </div>

            <!-- Orders Table -->
            <div class="bg-zinc-800 rounded-lg shadow-md overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-zinc-800">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Order ID
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Customer
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Order Details
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Date
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Location
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Status
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-100 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-zinc-800 divide-y divide-gray-200">
                            <% if (orders && orders.length > 0) { %>
                                <% orders.forEach(order => { %>
                                    <tr class="hover:bg-zinc-700">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                            #<%= order.orderCode %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-100">
                                                <%= order.userId.firstName %> <%= order.userId.lastName %>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="flex items-center space-x-3">
                                                
                                                <button 
                                                    onclick="showProductDetails(`<%= JSON.stringify(order.items) %>`)"
                                                    class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm"
                                                >
                                                    View Details
                                                </button>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-100">
                                            <%= new Date(order.orderDate).toLocaleDateString('en-US', {
                                                day: 'numeric',
                                                month: 'short',
                                                year: 'numeric'
                                            }) %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-100">
                                            <%= order.shippingAddress.city %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full
                                                <%= order.order.status === 'delivered' ? 'bg-green-100 text-green-800' :
                                                    order.order.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                    order.order.status === 'shipped' ? 'bg-blue-100 text-blue-800' :
                                                    'bg-yellow-100 text-yellow-800'
                                                %>">
                                                <%= order.order.status.charAt(0).toUpperCase() + order.order.status.slice(1) %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm">
                                            <% if (order.return.isReturnRequested && order.return.status === 'pending') { %>
                                                <div class="flex space-x-2">
                                                    <button onclick="handleReturnRequest('<%= order._id %>', 'approved')"
                                                            class="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">
                                                        Approve
                                                    </button>
                                                    <button onclick="handleReturnRequest('<%= order._id %>', 'rejected')"
                                                            class="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600">
                                                        Reject
                                                    </button>
                                                </div>
                                            <% } else if (['pending', 'processing', 'shipped'].includes(order.order.status)) { %>
                                                <select onchange="updateOrderStatus('<%= order._id %>', this.value)"
                                                        class="form-select rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                                    <option value="" disabled selected>Update Status</option>
                                                    
                                                    <% if (order.order.status === 'pending') { %>
                                                        <option value="cancelled">Cancel Order</option>
                                                    <% } else if (order.order.status === 'processing') { %>
                                                        <option value="shipped">Ship Order</option>
                                                        <option value="delivered">Mark as Delivered</option>
                                                        <option value="cancelled">Cancel Order</option>
                                                    <% } else if (order.order.status === 'shipped') { %>
                                                        <option value="delivered">Mark as Delivered</option>
                                                        <option value="cancelled">Cancel Order</option>
                                                    <% } %>
                                                </select>
                                            <% } else if (['cancelled', 'delivered', 'returned', 'refund processing'].includes(order.order.status)) { %>
                                                <span class="text-gray-500 italic">
                                                    <% if (order.order.status === 'cancelled') { %>
                                                        Order cancelled
                                                    <% } else if (order.order.status === 'delivered') { %>
                                                        Order completed
                                                    <% } else if (order.order.status === 'returned') { %>
                                                        Order returned
                                                    <% } else if (order.order.status === 'refund processing') { %>
                                                        Refund in progress
                                                    <% } %>
                                                </span>
                                            <% } %>
                                        </td>
                                        
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="7" class="px-6 py-4 text-center text-gray-500">
                                        No orders found
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
            <% if (pagination && pagination.totalPages > 1) { %>
                <div class="mt-6 flex justify-center pagination-container">
                    <nav class="flex items-center gap-2" aria-label="Pagination">
                        <% if (pagination.hasPrevPage) { %>
                            <a href="?page=<%= pagination.prevPage %>"
                               class="px-3 py-2 bg-zinc-700 text-white rounded-md hover:bg-zinc-600 transition-colors">
                                Previous
                            </a>
                        <% } %>

                        <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                            <a href="?page=<%= i %>"
                               class="px-3 py-2 rounded-md <%= pagination.currentPage === i ? 'bg-black text-white' : 'bg-zinc-700 text-white hover:bg-zinc-600' %> transition-colors">
                                <%= i %>
                            </a>
                        <% } %>

                        <% if (pagination.hasNextPage) { %>
                            <a href="?page=<%= pagination.nextPage %>"
                               class="px-3 py-2 bg-zinc-700 text-white rounded-md hover:bg-zinc-600 transition-colors">
                                Next
                            </a>
                        <% } %>
                    </nav>
                </div>
            <% } %>
        </div>
    </div>
    <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
            <!-- Modal Header -->
            <div class="flex justify-between items-center p-4 border-b">
                <h3 class="text-xl font-bold text-gray-900">Order Details</h3>
                <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <!-- Modal Content with Scroll -->
            <div class="overflow-y-auto p-4 flex-grow">
                <div id="modalContent">
                    <!-- Content will be dynamically inserted here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        function showProductDetails(itemsJson) {
            const items = JSON.parse(itemsJson);
            const modalContent = document.getElementById('modalContent');

            let content = `
                <!-- Products Table -->
                <div class="overflow-x-auto mb-6">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Price</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Quantity</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
            `;

            // Calculate total before discounts
            const subtotal = items.reduce((total, item) => {
                const itemTotal = item.price * item.quantity;
                return total + itemTotal;
            }, 0);

            items.forEach(item => {
                const itemSubtotal = item.price * item.quantity;
                content += `
                    <tr>
                        <td class="px-4 py-3 whitespace-nowrap">
                            <img src="${item.product.imageUrl[0]}" alt="${item.product.productName}" 
                                 class="h-16 w-16 object-cover rounded-md">
                        </td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                            ${item.product.productName}
                        </td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            ₹${item.price.toFixed(2)}
                        </td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            ${item.quantity}
                        </td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                            ₹${itemSubtotal.toFixed(2)}
                        </td>
                    </tr>
                `;
            });

            const orderDetails = items[0].order;

            content += `
                        </tbody>
                    </table>
                </div>

                <!-- Order Information Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Order Summary -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="text-lg font-semibold mb-3">Order Summary</h4>
                        <div class="space-y-2">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Subtotal:</span>
                                <span class="text-gray-900">₹${subtotal.toFixed(2)}</span>
                            </div>
                            ${orderDetails.couponCode ? `
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-600">Coupon (${orderDetails.couponCode}):</span>
                                    <span class="text-green-600">-₹${orderDetails.couponDiscount.toFixed(2)}</span>
                                </div>
                            ` : ''}
                            <div class="border-t border-gray-200 pt-2 mt-2">
                                <div class="flex justify-between font-semibold">
                                    <span>Total Amount:</span>
                                    <span>₹${orderDetails.totalAmount.toFixed(2)}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Payment Information -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="text-lg font-semibold mb-3">Payment Information</h4>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Payment Method:</span>
                                <span class="text-gray-900">${orderDetails.paymentMethod.toUpperCase()}</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Payment Status:</span>
                                <span class="text-gray-900">${orderDetails.paymentStatus.toUpperCase()}</span>
                            </div>
                        </div>
                    </div>


                    ${items[0].return?.isReturnRequested ? `
                        <!-- Return Information -->
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <h4 class="text-lg font-semibold mb-3">Return Request</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Status:</span>
                                    <span class="font-medium ${
                                        items[0].return.status === 'approved' ? 'text-green-600' :
                                        items[0].return.status === 'rejected' ? 'text-red-600' :
                                        'text-yellow-600'
                                    }">${items[0].return.status.toUpperCase()}</span>
                                </div>
                                ${items[0].return.reason ? `
                                    <div class="flex justify-between">
                                        <span class="text-gray-600">Reason:</span>
                                        <span class="text-gray-900">${items[0].return.reason}</span>
                                    </div>
                                ` : ''}
                                ${items[0].return.adminComment ? `
                                    <div class="flex justify-between">
                                        <span class="text-gray-600">Admin Comment:</span>
                                        <span class="text-gray-900">${items[0].return.adminComment}</span>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    ` : ''}
                </div>`;

            modalContent.innerHTML = content;
            document.getElementById('productModal').classList.remove('hidden');
            document.getElementById('productModal').classList.add('flex');
        }

        function closeModal() {
            document.getElementById('productModal').classList.remove('flex');
            document.getElementById('productModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('productModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });
        async function updateOrderStatus(orderId, newStatus) {
            if (newStatus === 'cancelled') {
                // Handle cancellation with reason
                const { value: cancelReason } = await Swal.fire({
                    title: 'Cancellation Reason',
                    input: 'text',
                    inputLabel: 'Please provide a reason for cancellation',
                    inputPlaceholder: 'Enter cancellation reason...',
                    showCancelButton: true,
                    confirmButtonColor: '#EF4444',
                    cancelButtonColor: '#6B7280',
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You need to provide a reason!';
                        }
                    }
                });

                if (!cancelReason) {
                    // Reset the select element if cancellation was aborted
                    document.querySelector(`select[onchange*="${orderId}"]`).value = "";
                    return;
                }

                try {
                    const response = await fetch(`/admin/orders/${orderId}/status`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            status: 'cancelled',
                            adminComment: cancelReason
                        })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled',
                            text: data.message,
                            confirmButtonColor: '#000000'
                        });
                        window.location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to cancel order',
                        confirmButtonColor: '#000000'
                    });
                    // Reset the select element on error
                    document.querySelector(`select[onchange*="${orderId}"]`).value = "";
                }
            } else {
                // Handle regular status updates
                try {
                    const response = await fetch(`/admin/orders/${orderId}/status`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ status: newStatus })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Status Updated',
                            text: data.message,
                            confirmButtonColor: '#000000'
                        });
                        window.location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to update status',
                        confirmButtonColor: '#000000'
                    });
                    // Reset the select element on error
                    document.querySelector(`select[onchange*="${orderId}"]`).value = "";
                }
            }
        }

        async function handleReturnRequest(orderId, returnStatus) {
            const { value: adminComment } = await Swal.fire({
                title: `${returnStatus === 'approved' ? 'Approve' : 'Reject'} Return Request`,
                input: 'text',
                inputLabel: 'Add a comment (optional)',
                inputPlaceholder: 'Enter your comment here...',
                showCancelButton: true,
                confirmButtonColor: returnStatus === 'approved' ? '#10B981' : '#EF4444',
                cancelButtonColor: '#6B7280',
                confirmButtonText: returnStatus === 'approved' ? 'Approve' : 'Reject',
                cancelButtonText: 'Cancel'
            });

            if (returnStatus) {
                try {
                    const response = await fetch(`/admin/orders/${orderId}/status`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ returnStatus, adminComment })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Return Request Updated',
                            text: data.message,
                            confirmButtonColor: '#000000'
                        });
                        
                        window.location.reload();
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to update return request',
                        confirmButtonColor: '#000000'
                    });
                    window.location.reload();
                }
            }
        }

        async function fetchPage(page) {
            try {

                const response = await fetch(`/admin/orders?page=${page}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) throw new Error('Failed to fetch orders');

                const html = await response.text();

                // Create a temporary container
                const temp = document.createElement('div');
                temp.innerHTML = html;

                // Update the table body
                const newTableBody = temp.querySelector('tbody');
                document.querySelector('tbody').innerHTML = newTableBody.innerHTML;

                // Update the pagination
                const newPagination = temp.querySelector('.pagination-container');
                document.querySelector('.pagination-container').innerHTML = newPagination.innerHTML;

                // Close loading indicator
                Swal.close();

            } catch (error) {
                console.error('Error fetching orders:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to fetch orders',
                    confirmButtonColor: '#000000'
                });
            }
        }

        // Update your pagination links to use fetchPage
        document.addEventListener('DOMContentLoaded', () => {
            const paginationContainer = document.querySelector('.pagination-container');
            paginationContainer.addEventListener('click', (e) => {
                e.preventDefault();
                if (e.target.tagName === 'A') {
                    const page = new URLSearchParams(e.target.href.split('?')[1]).get('page');
                    fetchPage(page);
                }
            });
        });
    </script>
</body>
</html> 