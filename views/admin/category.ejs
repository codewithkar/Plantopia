<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Manage Categories</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
  <body class="mybg-green text-white min-h-screen flex flex-col">
    <%- include('../partials/sidebar') %>

    <main class="ml-64 p-8">
      <div class="bg-gray-800 p-6 rounded-lg">
        <header class="flex items-center justify-between mb-4">
          <h1 class="text-2xl font-bold text-gray-200">Manage Categories</h1>
          <!-- Add Category Button -->
          <button
            onclick="openAddModal()"
            class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
          >
            Add Category
          </button>
        </header>
        
         <!-- List of Categories -->
        <div class="space-y-4">
          <% categories.forEach(category => { %>
          <div
            class="bg-gray-700 p-4 rounded-lg flex items-center justify-between"
          >
            <div>
              <h2 class="text-lg font-semibold <%= category.isActive ? 'text-white' : 'text-gray-400' %>">
                <%= category.name %>
                <span class="text-sm ml-2 <%= category.isActive ? 'text-green-500' : 'text-red-500' %>">
                  (<%= category.isActive ? 'Active' : 'Hidden' %>)
                </span>
              </h2>
              <p class="text-sm text-gray-400"><%= category.description %></p>
            </div>
            <div class="flex space-x-4">

              <!-- Edit Button -->
              <button
                onclick="openEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')"
                class="text-green-500 hover:text-green-400"
              >
                <i class="fas fa-edit"></i>
              </button>

              <!-- Toggle Button -->
              <button
                onclick="confirmToggleCategory('<%= category._id %>', '<%= category.isActive %>')"
                class="text-<%= category.isActive ? 'red' : 'green' %>-500 hover:text-<%= category.isActive ? 'red' : 'green' %>-400"
              >
                <i class="fas fa-<%= category.isActive ? 'eye-slash' : 'eye' %>"></i>
              </button>
            </div>
          </div>
          <% }); %>
        </div>
      </div>
    </main>

    <!-- Add Category Modal -->
    <div
      id="addModal"
      class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
    >
      <div class="bg-gray-800 p-6 rounded-lg w-96">
        <h2 class="text-xl font-bold text-gray-200 mb-4">Add Category</h2>
        <form id="addCategoryForm" action="/admin/category/add" method="POST">
          <input
            type="text"
            name="categoryName"
            placeholder="Category Name"
            class="w-full p-2 mb-4 bg-gray-700 border border-gray-600 rounded"
            required
          />
          <textarea
            name="categoryDescription"
            placeholder="Category Description"
            class="w-full p-2 mb-4 bg-gray-700 border border-gray-600 rounded"
            required
          ></textarea>
          <div class="flex justify-end space-x-4">
            <button
              type="button"
              onclick="closeAddModal()"
              class="bg-gray-600 text-white px-4 py-2 rounded-lg"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="bg-blue-500 text-white px-4 py-2 rounded-lg"
            >
              Add
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Edit Category Modal -->
    <div
      id="editModal"
      class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
    >
      <div class="bg-gray-800 p-6 rounded-lg w-96">
        <h2 class="text-xl font-bold text-gray-200 mb-4">Edit Category</h2>
        <form id="editCategoryForm" action="/admin/category/edit" method="POST">
          <input type="hidden" name="categoryId" id="editCategoryId" />
          <input
            type="text"
            name="categoryName"
            id="editCategoryName"
            placeholder="Category Name"
            class="w-full p-2 mb-4 bg-gray-700 border border-gray-600 rounded"
            required
          />
          <textarea
            name="categoryDescription"
            id="editCategoryDescription"
            placeholder="Category Description"
            class="w-full p-2 mb-4 bg-gray-700 border border-gray-600 rounded"
            required
          ></textarea>
          <div class="flex justify-end space-x-4">
            <button
              type="button"
              onclick="closeEditModal()"
              class="bg-gray-600 text-white px-4 py-2 rounded-lg"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="bg-green-500 text-white px-4 py-2 rounded-lg"
            >
              Update
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Add a loading spinner -->
    <div id="loadingSpinner" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500"></div>
    </div>

    <script>
      // Utility functions for modal and loading management
      const utils = {
        toggleLoading: (show) => {
          document.getElementById('loadingSpinner').classList.toggle('hidden', !show);
        },
        
        showAlert: ({ title, text, icon = 'success', confirmButtonColor = '#3B82F6' }) => {
          return Swal.fire({ title, text, icon, confirmButtonColor });
        },
        
        handleApiError: async (response) => {
          const error = await response.text();
          throw new Error(error || 'Something went wrong');
        },
        
        validateInput: (value) => {
          return value.trim().length > 0;
        }
      };

      // Modal management
      const modals = {
        toggle: (modalId, show) => {
          document.getElementById(modalId).classList.toggle('hidden', !show);
        },
        
        openAdd: () => modals.toggle('addModal', true),
        closeAdd: () => modals.toggle('addModal', false),
        
        openEdit: (id, name, description) => {
          document.getElementById('editCategoryId').value = id;
          document.getElementById('editCategoryName').value = name;
          document.getElementById('editCategoryDescription').value = description;
          modals.toggle('editModal', true);
        },
        closeEdit: () => modals.toggle('editModal', false)
      };

      // Form submission handlers
      const submitHandlers = {
        async handleSubmit(url, formData, successMessage) {
          const description = formData.get('categoryDescription');
          
          if (!utils.validateInput(description)) {
            await utils.showAlert({
              title: 'Error!',
              text: 'Description cannot be empty or contain only spaces',
              icon: 'error',
              confirmButtonColor: '#EF4444'
            });
            return;
          }

          utils.toggleLoading(true);
          
          try {
            const response = await fetch(url, {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body: new URLSearchParams(formData)
            });

            if (!response.ok) await utils.handleApiError(response);

            await utils.showAlert({
              title: 'Success!',
              text: successMessage
            });
            
            window.location.reload();
          } catch (error) {
            await utils.showAlert({
              title: 'Error!',
              text: error.message,
              icon: 'error',
              confirmButtonColor: '#EF4444'
            });
          } finally {
            utils.toggleLoading(false);
          }
        }
      };

      // Event Listeners
      document.addEventListener('DOMContentLoaded', () => {
        // Form submissions
        document.getElementById('addCategoryForm').addEventListener('submit', async function(e) {
          e.preventDefault();
          await submitHandlers.handleSubmit(
            '/admin/category/add', 
            new FormData(this), 
            'Category added successfully'
          );
        });

        document.getElementById('editCategoryForm').addEventListener('submit', async function(e) {
          e.preventDefault();
          await submitHandlers.handleSubmit(
            '/admin/category/edit', 
            new FormData(this), 
            'Category updated successfully'
          );
        });

        // Check URL params for messages
        const urlParams = new URLSearchParams(window.location.search);
        ['success', 'error'].forEach(type => {
          const message = urlParams.get(type);
          if (message) {
            utils.showAlert({
              title: type.charAt(0).toUpperCase() + type.slice(1) + '!',
              text: decodeURIComponent(message),
              icon: type,
              confirmButtonColor: type === 'success' ? '#3B82F6' : '#EF4444'
            });
          }
        });
      });

      // Toggle confirmation
      function confirmToggleCategory(categoryId, isActive) {
        const action = isActive ? 'hide' : 'show';
        const message = isActive ? 
            "This category will be hidden from users. Continue?" : 
            "This category will be visible to users. Continue?";

        Swal.fire({
            title: `${action.charAt(0).toUpperCase() + action.slice(1)} Category?`,
            text: message,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#000000',
            cancelButtonColor: '#6B7280',
            confirmButtonText: 'Yes',
            cancelButtonText: 'Cancel'
        }).then(async (result) => {
            if (result.isConfirmed) {
                utils.toggleLoading(true);
                try {
                    const response = await fetch(`/admin/category/toggle?id=${categoryId}`);
                    if (!response.ok) await utils.handleApiError(response);
                    
                    await utils.showAlert({
                        title: 'Success!',
                        text: `Category ${action}n successfully.`
                    });
                    
                    window.location.reload();
                } catch (error) {
                    await utils.showAlert({
                        title: 'Error!',
                        text: error.message,
                        icon: 'error',
                        confirmButtonColor: '#EF4444'
                    });
                } finally {
                    utils.toggleLoading(false);
                }
            }
        });
      }
    
      // Update button onclick handlers to use new modal functions
      window.openAddModal = modals.openAdd;
      window.closeAddModal = modals.closeAdd;
      window.openEditModal = modals.openEdit;
      window.closeEditModal = modals.closeEdit;
    </script>
  </body>
</html>