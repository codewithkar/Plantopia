<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - Plantopia</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>
<body class="bg-[##FFF6F4]">
    <%- include("../partials/nav") %>
    <div class="h-10"></div>

    <!-- Main Content -->
    <main class="container mx-auto flex flex-col md:flex-row py-10 px-6 gap-6">
        <!-- Profile Sidebar -->
        <%- include("../partials/profileSidebar") %>

        <!-- Orders Section -->
        <section class="w-full md:w-3/4">
            <% if (orders && orders.length > 0) { %>
                <div class="space-y-6">
                    <% orders.forEach(order => { %>
                        <div class="bg-white rounded-lg shadow-md overflow-hidden">
                            <!-- Order Header -->
                            <div class="bg-gray-50 p-6 border-b cursor-pointer hover:bg-gray-100 transition-colors"
                                 onclick="toggleOrderDetails('<%= order._id %>')">
                                <div class="flex flex-wrap justify-between items-center gap-4">
                                    <div>
                                        <p class="text-sm text-gray-500">Order ID</p>
                                        <p class="font-medium">#<%= order.orderCode %></p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-500">Order Date</p>
                                        <p class="font-medium">
                                            <%= new Date(order.orderDate).toLocaleDateString('en-US', {
                                                day: 'numeric',
                                                month: 'short',
                                                year: 'numeric'
                                            }) %>
                                        </p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-500">Total Amount</p>
                                        <p class="font-medium">₹<%= order.totalAmount %></p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-500">Status</p>
                                        <% 
                                            // Get the most common status among items
                                            const statusCounts = order.items.reduce((acc, item) => {
                                                acc[item.order.status] = (acc[item.order.status] || 0) + 1;
                                                return acc;
                                            }, {});
                                            
                                            const mostCommonStatus = Object.entries(statusCounts)
                                                .reduce((a, b) => a[1] > b[1] ? a : b)[0];
                                                
                                            const statusText = mostCommonStatus.charAt(0).toUpperCase() + 
                                              mostCommonStatus.slice(1);
                                        %>
                                        <span class="
                                            inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                            <%= mostCommonStatus === 'delivered' ? 'bg-green-100 text-green-800' :
                                                mostCommonStatus === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                mostCommonStatus === 'returned' ? 'bg-orange-100 text-orange-800' :
                                                mostCommonStatus === 'shipped' ? 'bg-blue-100 text-blue-800' :
                                                'bg-yellow-100 text-yellow-800'
                                            %>
                                        ">
                                            <%= statusText %>
                                        </span>
                                    </div>
                                    <div class="flex items-center">
                                        <i class="fas fa-chevron-down transform transition-transform" id="arrow-<%= order._id %>"></i>
                                    </div>
                                </div>
                            </div>

                            <!-- Collapsible Order Details -->
                            <div class="hidden" id="details-<%= order._id %>">
                                <!-- Shipping Details -->
                                <div class="p-6 border-b">
                                    <h3 class="text-lg font-semibold mb-4">Shipping Details</h3>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <p class="text-sm text-gray-500">Delivered To</p>
                                            <p class="font-medium"><%= order.shippingAddress.fullName %></p>
                                            <p class="text-sm text-gray-600">
                                                <%= order.shippingAddress.addressLine1 %><br>
                                                <%= order.shippingAddress.addressLine2 ? order.shippingAddress.addressLine2  : '' %><br>
                                                <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %><br>
                                                <%= order.shippingAddress.pincode %>
                                            </p>
                                            <p class="text-sm text-gray-600">Phone: <%= order.shippingAddress.mobileNumber %></p>
                                        </div>
                                        <div>
                                            <p class="text-sm text-gray-500">Payment Method</p>
                                            <p class="font-medium"><%= order.payment.method.toUpperCase() %></p>
                                            <p class="text-sm text-gray-500 mt-2">Payment Status</p>
                                            <p class="font-medium"><%= order.payment.paymentStatus.charAt(0).toUpperCase() + order.payment.paymentStatus.slice(1) %></p>
                                        </div>
                                    </div>
                                </div>

                                <!-- Order Items -->
                                <div class="p-6 border-b">
                                    <h3 class="text-lg font-semibold mb-4">Order Items</h3>
                                    <div class="space-y-4">
                                        <% order.items.forEach(item => { %>
                                            <div class="flex items-center gap-4 p-4 border rounded-lg" data-order="<%= order._id %>">
                                                <img src="<%= item.product.imageUrl[0] %>" 
                                                     alt="<%= item.product.productName %>"
                                                     class="w-16 h-16 object-cover rounded">
                                                 
                                                <div class="flex-1">
                                                    <p class="font-medium"><%= item.product.productName %></p>
                                                    <div class="text-sm text-gray-500">
                                                        <p>Quantity: <%= item.quantity %></p>
                                                        <p>Price: ₹<%= item.price %></p>
                                                        <% if (item.discountedPrice && item.price !== item.discountedPrice) { %>
                                                            <p class="text-green-600">
                                                                Discounted Price: ₹<%= item.discountedPrice %>
                                                                <span class="text-xs">
                                                                    (Save ₹<%= (item.price - item.discountedPrice).toFixed(2) %>)
                                                                </span>
                                                            </p>
                                                        <% } %>
                                                    </div>
                                                </div>

                                                <!-- Status and Actions -->
                                                <div class="flex flex-col gap-2 w-full sm:w-auto sm:items-end">
                                                    <!-- Status Badge -->
                                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                                        <%= item.order.status === 'delivered' ? 'bg-green-100 text-green-800' :
                                                            item.order.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                            item.order.status === 'returned' ? 'bg-orange-100 text-orange-800' :
                                                            item.order.status === 'shipped' ? 'bg-blue-100 text-blue-800' :
                                                            'bg-yellow-100 text-yellow-800'
                                                        %>">
                                                        <%= item.order.status.charAt(0).toUpperCase() + item.order.status.slice(1) %>
                                                    </span>

                                                    <!-- Action Buttons -->
                                                    <div class="flex flex-col sm:flex-row gap-2">
                                                        <!-- Timeline Button -->
                                                        <button onclick="showTimelineModal('<%= order._id %>', '<%= item.product._id %>', '<%= item.product.productName %>', <%= JSON.stringify(item.order.statusHistory) %>)"
                                                                class="px-3 py-1 text-sm bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors">
                                                            <i class="fas fa-history mr-1"></i>
                                                            Timeline
                                                        </button>

                                                        <!-- Cancel/Return Button (if applicable) -->
                                                        <% if (item.order.status === 'pending' || item.order.status === 'processing') { %>
                                                            <% if (order.payment.paymentStatus !== 'failed') { %>
                                                                <button onclick="cancelOrder('<%= order._id %>', '<%= item.product._id %>', '<%= item.product.productName %>')"
                                                                    class="px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                                                                Cancel
                                                            </button>
                                                            <% } %>
                                                        <% } %>

                                                        <% if (item.order.status === 'delivered' && !item.return.isReturnRequested) { %>
                                                            <button onclick="requestReturnForItem('<%= order._id %>', '<%= item.product._id %>', '<%= item.product.productName %>')"
                                                                    class="px-3 py-1 text-sm bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors">
                                                                Return
                                                            </button>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="p-6 flex justify-end gap-4">
                                    <% if (order.items.every(item => ['delivered', 'returned', 'refund processing'].includes(item.order.status))) { %>
                                        <button onclick="downloadInvoice('<%= order._id %>')"
                                                class="px-4 py-2 bg-zinc-800 text-white rounded-lg hover:bg-zinc-700 transition-colors">
                                            <i class="fas fa-file-pdf mr-2"></i>Download Invoice
                                        </button>
                                    <% } %>

                                    <% if (order.payment.method === 'razorpay' && order.payment.paymentStatus === 'failed') { %>
                                        <button onclick="retryPayment('<%= order._id %>')"
                                                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                            <i class="fas fa-sync-alt mr-2"></i>Retry Payment
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Pagination -->
                <% if (totalPages > 1) { %>
                    <div class="mt-8 flex justify-center items-center space-x-4">
                        <% if (hasPrevPage) { %>
                            <a href="?page=<%= currentPage - 1 %>" 
                               class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                                <i class="fas fa-chevron-left mr-2"></i>
                                Previous
                            </a>
                        <% } %>

                        <div class="flex items-center space-x-2">
                            <% for(let i = 1; i <= totalPages; i++) { %>
                                <% if (i === currentPage) { %>
                                    <span class="px-4 py-2 bg-black text-white rounded-lg">
                                        <%= i %>
                                    </span>
                                <% } else if (
                                    i === 1 || 
                                    i === totalPages || 
                                    (i >= currentPage - 1 && i <= currentPage + 1)
                                ) { %>
                                    <a href="?page=<%= i %>" 
                                       class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                                        <%= i %>
                                    </a>
                                <% } else if (
                                    i === currentPage - 2 || 
                                    i === currentPage + 2
                                ) { %>
                                    <span class="px-2">...</span>
                                <% } %>
                            <% } %>
                        </div>

                        <% if (hasNextPage) { %>
                            <a href="?page=<%= currentPage + 1 %>" 
                               class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                                Next
                                <i class="fas fa-chevron-right ml-2"></i>
                            </a>
                        <% } %>
                    </div>
                <% } %>
            <% } else { %>
                <div class="bg-white rounded-lg shadow-md p-8 text-center">
                    <p class="text-gray-500">No orders found</p>
                </div>
            <% } %>
        </section>
    </main>

    <%- include("../partials/footer") %>

    <script>
        function toggleOrderDetails(orderId) {
            const detailsDiv = document.getElementById(`details-${orderId}`);
            const arrow = document.getElementById(`arrow-${orderId}`);
            
            detailsDiv.classList.toggle('hidden');
            arrow.classList.toggle('rotate-180');
        }

        async function cancelOrder(orderId, productId, productName) {
            console.log(orderId, productId, productName);
            
            const { value: reason } = await Swal.fire({
                title: 'Cancel Order',
                text: 'Please select a reason for cancellation',
                input: 'select',
                inputOptions: {
                    'Changed my mind': 'Changed my mind',
                    'Found better price elsewhere': 'Found better price elsewhere',
                    'Ordered by mistake': 'Ordered by mistake',
                    'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                cancelButtonColor: '#d33',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Please select a reason';
                    }
                }
            });

            if (reason) {
                try {
                    const response = await fetch(`/orders/${orderId}/cancel/${productId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled',
                            text: data.message,
                            confirmButtonColor: '#000000'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to cancel order',
                        confirmButtonColor: '#000000'
                    });
                }
            }
        }

        // async function requestReturnForItem(orderId, productId, productName) {
        //     const reasons = {
        //         'Product damaged': 'Product damaged',
        //         'Wrong product received': 'Wrong product received',
        //         'Product not as described': 'Product not as described',
        //         'Size/fit issue': 'Size/fit issue',
        //         'Quality not as expected': 'Quality not as expected',
        //         'Other': 'Other'
        //     };

        //     // Show confirm dialog with select input
        //     const select = document.createElement('select');
        //     select.className = 'mt-4 w-full rounded border-gray-300';
        //     select.innerHTML = `
        //         <option value="">Select a reason</option>
        //         ${Object.entries(reasons).map(([key, value]) => 
        //             `<option value="${key}">${value}</option>`
        //         ).join('')}
        //     `;

        //     const confirmMessage = document.getElementById('confirmMessage');
        //     confirmMessage.textContent = 'Please select a reason for return';
        //     confirmMessage.appendChild(select);

        //     showAlert('confirm', '', `Return ${productName}`);

        //     document.getElementById('confirmAction').onclick = async () => {
        //         const reason = select.value;
        //         if (!reason) {
        //             showAlert('error', 'Please select a reason');
        //             return;
        //         }

        //         try {
        //             hideAlert();
        //             showAlert('loading');

        //             const response = await fetch(`/orders/${orderId}/items/${productId}/return`, {
        //                 method: 'POST',
        //                 headers: { 'Content-Type': 'application/json' },
        //                 body: JSON.stringify({ reason })
        //             });

        //             const data = await response.json();
        //             hideAlert();

        //             if (response.ok) {
        //                 showAlert('success', data.message || 'Return request submitted successfully');
        //                 // Add reload after success alert is closed
        //                 document.querySelector('#successAlert button').onclick = () => {
        //                     hideAlert();
        //                     window.location.reload();
        //                 };
        //             } else {
        //                 throw new Error(data.message || 'Failed to submit return request');
        //             }
        //         } catch (error) {
        //             hideAlert();
        //             showAlert('error', error.message || 'Failed to request return');
        //         }
        //     };
        // }

        async function requestReturnForItem(orderId, productId, productName) {
    const { value: reason } = await Swal.fire({
        title: `Return ${productName}`,
        text: 'Please select a reason for return',
        input: 'select',
        inputOptions: {
            'Product damaged': 'Product damaged',
            'Wrong product received': 'Wrong product received',
            'Product not as described': 'Product not as described',
            'Size/fit issue': 'Size/fit issue',
            'Quality not as expected': 'Quality not as expected',
            'Other': 'Other'
        },
        inputPlaceholder: 'Select a reason',
        showCancelButton: true,
        confirmButtonColor: '#000000',
        cancelButtonColor: '#d33',
        inputValidator: (value) => {
            if (!value) {
                return 'Please select a reason';
            }
        }
    });

    if (reason) {
        try {
            const response = await fetch(`/orders/${orderId}/items/${productId}/return`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason })
            });

            const data = await response.json();

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Return Requested',
                    text: data.message || 'Return request submitted successfully',
                    confirmButtonColor: '#000000'
                }).then(() => {
                    window.location.reload();
                });
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to request return',
                confirmButtonColor: '#000000'
            });
        }
    }
}

        async function downloadInvoice(orderId) {
            try {
                const response = await fetch(`/orders/${orderId}/invoice`, {
                    method: 'GET'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to generate invoice');
                }

                // Create a blob from the PDF stream
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                
                // Create a temporary link and trigger download
                const a = document.createElement('a');
                a.href = url;
                a.download = `invoice-${orderId.slice(-6)}.pdf`;
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                window.URL.revokeObjectURL(url);
                a.remove();
            } catch (error) {
                console.error('Invoice download error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to download invoice',
                    confirmButtonColor: '#000000'
                });
            }
        }

        async function retryPayment(orderId) {
            try {
                const response = await fetch(`/orders/${orderId}/retry-payment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();

                if (data.success) {
                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: data.order.currency,
                        order_id: data.order.id,
                        name: "Onyx Fashion Store",
                        description: "Order Payment Retry",
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch(`/orders/${orderId}/verify-retry-payment`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature,
                                        orderId: orderId
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (verifyData.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful',
                                        text: 'Your payment has been processed successfully',
                                        confirmButtonColor: '#000000'
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    throw new Error(verifyData.message);
                                }
                            } catch (error) {
                                throw error;
                            }
                        },
                        prefill: {
                            name: data.orderDetails.name,
                            email: data.orderDetails.email,
                            contact: data.orderDetails.contact
                        },
                        theme: {
                            color: "#000000"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to process payment',
                    confirmButtonColor: '#000000'
                });
            }
        }
    </script>
</body>
</html> 