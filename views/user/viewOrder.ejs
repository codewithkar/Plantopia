<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - Plantopia</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>
<body class="bg-[##FFF6F4]">
    <%- include("../partials/nav") %>
    <div class="h-10"></div>

    <!-- Main Content -->
    <main class="container mx-auto flex flex-col md:flex-row py-10 px-6 gap-6">
        <!-- Profile Sidebar -->
        <%- include("../partials/profileSidebar") %>

        <!-- Orders Section -->
      
    </main>

    <%- include("../partials/footer") %>

    <script>
        function toggleOrderDetails(orderId) {
            const detailsDiv = document.getElementById(`details-${orderId}`);
            const arrow = document.getElementById(`arrow-${orderId}`);
            
            detailsDiv.classList.toggle('hidden');
            arrow.classList.toggle('rotate-180');
        }

        async function cancelOrder(orderId) {
            const { value: reason } = await Swal.fire({
                title: 'Cancel Order',
                text: 'Please select a reason for cancellation',
                input: 'select',
                inputOptions: {
                    'Changed my mind': 'Changed my mind',
                    'Found better price elsewhere': 'Found better price elsewhere',
                    'Ordered by mistake': 'Ordered by mistake',
                    'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                cancelButtonColor: '#d33',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Please select a reason';
                    }
                }
            });

            if (reason) {
                try {
                    const response = await fetch(`/orders/${orderId}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled',
                            text: data.message,
                            confirmButtonColor: '#000000'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to cancel order',
                        confirmButtonColor: '#000000'
                    });
                }
            }
        }

        async function requestReturn(orderId) {
            const { value: reason } = await Swal.fire({
                title: 'Return Order',
                text: 'Please select a reason for return',
                input: 'select',
                inputOptions: {
                    'Product damaged': 'Product damaged',
                    'Wrong product received': 'Wrong product received',
                    'Product not as described': 'Product not as described',
                    'Size/fit issue': 'Size/fit issue',
                    'Quality not as expected': 'Quality not as expected',
                    'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                cancelButtonColor: '#d33',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Please select a reason';
                    }
                }
            });

            if (reason) {
                try {
                    const response = await fetch(`/orders/${orderId}/return`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Return Requested',
                            text: data.message,
                            confirmButtonColor: '#000000'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to request return',
                        confirmButtonColor: '#000000'
                    });
                }
            }
        }

        async function downloadInvoice(orderId) {
            try {
                const response = await fetch(`/orders/${orderId}/invoice`, {
                    method: 'GET'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to generate invoice');
                }

                // Create a blob from the PDF stream
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                
                // Create a temporary link and trigger download
                const a = document.createElement('a');
                a.href = url;
                a.download = `invoice-${orderId.slice(-6)}.pdf`;
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                window.URL.revokeObjectURL(url);
                a.remove();
            } catch (error) {
                console.error('Invoice download error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to download invoice',
                    confirmButtonColor: '#000000'
                });
            }
        }

        async function retryPayment(orderId) {
            try {
                const response = await fetch(`/orders/${orderId}/retry-payment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();

                if (data.success) {
                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: data.order.currency,
                        order_id: data.order.id,
                        name: "Onyx Fashion Store",
                        description: "Order Payment Retry",
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch(`/orders/${orderId}/verify-retry-payment`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature,
                                        orderId: orderId
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (verifyData.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful',
                                        text: 'Your payment has been processed successfully',
                                        confirmButtonColor: '#000000'
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    throw new Error(verifyData.message);
                                }
                            } catch (error) {
                                throw error;
                            }
                        },
                        prefill: {
                            name: data.orderDetails.name,
                            email: data.orderDetails.email,
                            contact: data.orderDetails.contact
                        },
                        theme: {
                            color: "#000000"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to process payment',
                    confirmButtonColor: '#000000'
                });
            }
        }
    </script>
</body>
</html> 