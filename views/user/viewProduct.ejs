<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Product Details</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
      #imageZoom {
        width: 100%;
        position: relative;
        cursor: zoom-in;
      }
      #imageZoom img {
        width: 100%;
        height: auto;
        object-fit: cover;
      }
      #imageZoom::after {
        display: var(--display);
        content: "";
        width: 100%;
        height: 100%;
        background-color: black;
        background-image: var(--url);
        background-size: 200%;
        background-position: var(--zoom-x) var(--zoom-y);
        position: absolute;
        left: 0;
        top: 0;
        pointer-events: none;
      }

      .product-thumbnails::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }
      
      .product-thumbnails::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
      }
      
      .product-thumbnails::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
      }

      .product-thumbnails::-webkit-scrollbar-thumb:hover {
        background: #555;
      }
    </style>
  </head>

  <body class="bg-[##FFF6F4]">
    <%- include("../partials/nav") %>
    
    <!-- Main Content -->
    <div class="min-h-screen pt-20">
      <!-- Breadcrumb -->
      <nav class="max-w-7xl mx-auto px-4 py-4">
        <ol class="flex items-center space-x-2 text-sm">
          <li><a href="/home" class="text-gray-600 hover:text-black">Home</a></li>
          <li><span class="text-gray-400">/</span></li>
          <li><a href="/shop" class="text-gray-600 hover:text-black">Shop</a></li>
          <li><span class="text-gray-400">/</span></li>
          <li class="text-gray-900 font-medium"><%= product.brand %> <%= product.productName %></li>
        </ol>
      </nav>

      <!-- Product Section -->
      <div class="max-w-7xl mx-auto px-4 py-8">
        <div class="bg-white rounded-2xl shadow-sm p-6 md:p-8">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Image Gallery Section -->
            <div class="space-y-4">
              <!-- Main Image with Zoom -->
              <div class="bg-gray-50 rounded-xl p-4">
                <div id="imageZoom" style="--url: url(<%= product.imageUrl[0] %>); --zoom-x: 0%; --zoom-y: 0%; --display: none;">
                  <img 
                    id="main-product-image"
                    src="<%= product.imageUrl[0] %>"
                    alt="<%= product.productName %>"
                    class="rounded-lg"
                  />
                </div>
              </div>
              
              <!-- Thumbnails -->
              <div class="product-thumbnails flex space-x-4 overflow-x-auto py-2">
                <% product.imageUrl.forEach((image, index) => { %>
                  <img 
                    src="<%= image %>" 
                    alt="<%= product.productName %> view <%= index + 1 %>"
                    class="w-20 h-20 rounded-lg cursor-pointer object-cover border-2 border-transparent hover:border-black transition-colors"
                    onclick="updateMainImage('<%= image %>')"
                  />
                <% }) %>
              </div>
            </div>

            <!-- Product Info Section -->
            <div class="space-y-6">
              <!-- Brand & Title -->
              <div>
                <h1 class="text-3xl font-bold text-gray-900 mt-1"><%= product.productName %></h1>
              </div>

              <!-- Rating -->
              <div class="flex items-center space-x-2">
                <div class="flex text-yellow-400">
                  <% for(let i = 1; i <= 5; i++) { %>
                    <i class="fas fa-star <%= i <= product.rating ? '' : 'text-gray-300' %>"></i>
                  <% } %>
                </div>
                <span class="text-gray-600">(<%= product.rating || 'No rating' %>)</span>
              </div>

              <!-- Price -->
              <div class="space-y-2">
                <% if (product.discountPrice < product.originalPrice) { %>
                  <div class="flex items-baseline space-x-3">
                    <span class="text-4xl font-bold text-gray-900">₹<%= product.discountPrice %></span>
                    <span class="text-xl text-gray-500 line-through">₹<%= product.originalPrice %></span>
                    <span class="text-green-600 font-medium px-2 py-1 bg-green-50 rounded-full text-sm">
                      -<%= Math.round((product.originalPrice - product.discountPrice) / product.originalPrice * 100) %>%
                    </span>
                  </div>
                <% } else { %>
                  <span class="text-4xl font-bold text-gray-900">₹<%= product.originalPrice %></span>
                <% } %>
              </div>

              <!-- Stock Status -->
              <div>
                <% if (product.stock === 0) { %>
                  <div class="inline-flex items-center px-4 py-2 bg-red-50 text-red-700 rounded-full font-medium">
                    <i class="fas fa-times-circle mr-2"></i>
                    Out of Stock
                  </div>
                <% } else { %>
                  <div class="inline-flex items-center px-4 py-2 bg-green-50 text-green-700 rounded-full font-medium">
                    <i class="fas fa-check-circle mr-2"></i>
                    In Stock (<%= product.stock %> available)
                  </div>
                <% } %>
              </div>

              <!-- Product Details -->
              <div class="border-t border-gray-200 pt-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Product Details</h3>
                <dl class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <dt class="text-sm text-gray-500">Type</dt>
                    <dd class="text-sm font-medium text-gray-900"><%= product.type.toUpperCase() %></dd>
                  </div>
                  <div>
                    <dt class="text-sm text-gray-500">Size</dt>
                    <dd class="text-sm font-medium text-gray-900"><%= product.size.toUpperCase() %></dd>
                  </div>
                </dl>
              </div>

              <!-- Actions -->
              <div class="flex gap-4 pt-6">
                <% if (product.stock > 0) { %>
                    <button 
                    onclick="addToCart('<%= product._id %>')"
                    class="flex-1 px-6 py-4 bg-[#2c3e50] text-white rounded-xl font-bold shadow-sm hover:bg-[#34495e] transition-all transform hover:scale-[1.02] active:scale-[0.98]"
                  >
                    <i class="fas fa-shopping-cart mr-2"></i>
                    Add To Cart
                  </button>
                <% } %>
                
                <button 
                  onclick="toggleWishlist('<%= product._id %>')"
                  id="wishlist-btn-<%= product._id %>"
                  class="px-6 py-4 bg-white text-gray-800 rounded-xl font-bold shadow-sm hover:bg-gray-50 border border-gray-200 transition-all transform hover:scale-[1.02] active:scale-[0.98]"
                >
                  <i class="far fa-heart text-xl"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="bg-white rounded-2xl shadow-sm p-6 md:p-8">
            <!-- Description -->
            <h3 class="text-2xl font-bold text-gray-900 mb-8 text-center">About the Product</h3>
            <p class="text-gray-600 text-lg text-center"><%= product.description %></p>

            </div>
        </div>

        <!-- Related Products -->
        <div class="mt-16">
          <h3 class="text-2xl font-bold text-gray-900 mb-8 text-center">You May Also Like</h3>
          <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-6">
            <% relatedProducts.forEach(product => { %>
              <div class="bg-white rounded-xl shadow-sm p-4 hover:shadow-md transition-shadow">
                <a href="/product/<%= product._id %>" class="block">
                  <img 
                    class="w-full h-48 object-cover rounded-lg mb-4"
                    src="<%= product.imageUrl[0] %>"
                    alt="<%= product.productName %>"
                  />
                  <div class="space-y-2">
                    <h3 class="font-medium text-gray-900 line-clamp-2">
                   <%= product.productName %>
                    </h3>
                    <div class="flex items-center text-yellow-400 text-sm">
                      <i class="fas fa-star"></i>
                      <span class="ml-1 text-gray-600"><%= product.rating || 'No rating' %></span>
                    </div>
                    <div class="flex items-baseline gap-2">
                      <span class="text-lg font-bold text-gray-900">₹<%= product.price %></span>
                      
                    </div>
                  </div>
                </a>
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/footer") %>

    <script>
      // Image zoom functionality
      const imageZoom = document.getElementById('imageZoom');

      imageZoom.addEventListener('mousemove', (event) => {
        imageZoom.style.setProperty('--display', 'block');
        const pointer = {
          x: (event.offsetX * 100) / imageZoom.offsetWidth,
          y: (event.offsetY * 100) / imageZoom.offsetHeight,
        };
        imageZoom.style.setProperty('--zoom-x', pointer.x + '%');
        imageZoom.style.setProperty('--zoom-y', pointer.y + '%');
      });

      imageZoom.addEventListener('mouseout', () => {
        imageZoom.style.setProperty('--display', 'none');
      });

      // Update main image
      function updateMainImage(imageUrl) {
        document.getElementById('main-product-image').src = imageUrl;
        imageZoom.style.setProperty('--url', `url(${imageUrl})`);
      }

      // Add to cart functionality
      async function addToCart(productId) {
        try {
          const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productId,
              quantity: 1
            })
          });

          const data = await response.json();

          if (response.ok) {
            // Update the button to "Go to Cart"
            const addToCartBtn = document.querySelector(`button[onclick="addToCart('${productId}')"]`);
            addToCartBtn.innerHTML = `
              <i class="fas fa-shopping-bag mr-2"></i>
              Go to Cart
            `;
            addToCartBtn.onclick = () => window.location.href = '/cart';
            addToCartBtn.classList.remove('bg-black', 'hover:bg-gray-800');
            addToCartBtn.classList.add('bg-green-600', 'hover:bg-green-700');

            Swal.fire({
              icon: 'success',
              title: 'Added to Cart',
              text: data.message,
              toast: true,
              position: 'top-end',
              showConfirmButton: false,
              timer: 2000
            });

            // Update cart count in navbar
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
              cartCountElement.textContent = data.cartCount;
            }
          } else {
            // If the error is about quantity limit, show toast alert
            if (data.message.includes('Maximum limit')) {
              Swal.fire({
                title: 'Maximum Quantity Reached',
                text: data.message,
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: true,
                showCancelButton: true,
                confirmButtonText: 'View Cart',
                cancelButtonText: 'Close',
                timer: 5000,
                timerProgressBar: true,
                customClass: {
                  popup: 'rounded-lg shadow-md',
                  title: 'text-gray-800 font-semibold',
                  htmlContainer: 'text-gray-600',
                  actions: 'space-x-2',
                  confirmButton: 'bg-black hover:bg-gray-800 text-white px-4 py-2 rounded-lg text-sm transition-colors',
                  cancelButton: 'bg-gray-100 hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg text-sm transition-colors'
                },
                buttonsStyling: false,
                showClass: {
                  popup: 'animate__animated animate__fadeInRight animate__faster'
                },
                hideClass: {
                  popup: 'animate__animated animate__fadeOutRight animate__faster'
                }
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = '/cart';
                }
              });
            } else {
              throw new Error(data.message);
            }
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to add to cart',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
          });
        }
      }

      // Add to wishlist functionality
      async function addToWishlist(productId) {
        try {
          const response = await fetch('/wishlist/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId })
          });

          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Added to Wishlist',
              timer: 1500,
              showConfirmButton: true
            });
          } else {
            const data = await response.json();
            throw new Error(data.message);
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to add to wishlist'
          });
        }
      }

      async function toggleWishlist(productId) {
        try {
            const wishlistBtn = document.querySelector(`#wishlist-btn-${productId} i`);
            const isInWishlist = wishlistBtn.classList.contains('fas');

            if (isInWishlist) {
                // Remove from wishlist
                const response = await fetch(`/wishlist/remove/${productId}`, {
                    method: 'DELETE'
                });
                const data = await response.json();

                if (data.success) {
                    wishlistBtn.classList.replace('fas', 'far');
                    wishlistBtn.classList.remove('text-red-500');
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Removed from wishlist',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            } else {
                // Add to wishlist
                const response = await fetch('/wishlist/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });
                const data = await response.json();

                if (data.success) {
                    wishlistBtn.classList.replace('far', 'fas');
                    wishlistBtn.classList.add('text-red-500');
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Added to wishlist',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            }
        } catch (error) {
            console.error('Wishlist toggle error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Error updating wishlist',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
        }
      }

      // Check initial wishlist status when page loads
      document.addEventListener('DOMContentLoaded', async () => {
        try {
            const response = await fetch(`/wishlist/check/<%= product._id %>`);
            const data = await response.json();

            if (data.success && data.isInWishlist) {
                const wishlistBtn = document.querySelector(`#wishlist-btn-<%= product._id %> i`);
                wishlistBtn.classList.replace('far', 'fas');
                wishlistBtn.classList.add('text-red-500');
            }
        } catch (error) {
            console.error('Error checking wishlist status:', error);
        }
      });
    </script>
  </body>
</html>
