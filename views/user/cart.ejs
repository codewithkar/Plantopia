<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <title>Plantopia Cart</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>

  <body class="bg-gray-100">
    <%- include("../partials/nav") %>

    <!-- Cart Section -->
    <div class="container mx-auto px-4 py-8 mt-28">
      <div class="flex flex-row-reverse items-start space-x-reverse space-x-8">
        <!-- Products Section (Right Side) -->
        <div class="w-3/4">
          <div class="bg-white p-8 rounded-2xl shadow-lg">
            <h1 class="text-3xl font-bold text-gray-800 mb-8">Shopping Cart</h1>
            <% if (cartItems && cartItems.length > 0) { %>
              <div class="space-y-6">
                <% cartItems.forEach(item => { %>
                  <div class="flex items-center border-b pb-6" id="cart-item-<%= item.product._id %>">
                    <img
                      src="<%= item.product.imageUrl[0] %>"
                      alt="<%= item.product.productName %>"
                      class="w-32 h-32 object-cover rounded-xl"
                    />
                    <div class="flex-1 ml-6">
                      <div class="flex justify-between items-start">
                        <div>
                          <h3 class="text-lg font-semibold text-gray-800" id="product-name">
                            <%= item.product.productName %>
                          </h3>
                          <p class="text-gray-500 text-sm mt-1">
                            size: <%= item.product.size %>
                          </p>
                          <p class="text-green-500 text-sm mt-1">
                            <%= item.product.stock > 0 ? 'In Stock' : 'Out of Stock' %>
                          </p>
                        </div>
                        <button 
                            onclick="removeFromCart(this, '<%= item.product._id %>')" 
                            class="text-red-500 hover:text-red-700 transition-colors"
                        >
                            <i class="fas fa-trash-alt"></i>
                        </button>
                      </div>
                      <div class="flex justify-between items-center mt-4">
                        <div class="flex items-center space-x-2">
                          <button 
                            class="quantity-btn bg-gray-200 text-gray-600 w-8 h-8 rounded-full hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                            onclick="updateQuantity(this, '<%= item.product._id %>', 'decrease')"
                            <%= item.quantity <= 1 ? 'disabled' : '' %>
                          >
                            <i class="fas fa-minus"></i>
                          </button>
                          <span class="quantity-display w-8 text-center font-medium">
                            <%= item.quantity %>
                          </span>
                          <button 
                            class="quantity-btn bg-gray-200 text-gray-600 w-8 h-8 rounded-full hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                            onclick="updateQuantity(this, '<%= item.product._id %>', 'increase')"
                            <%= item.quantity >= 3 ? 'disabled' : '' %>
                          >
                            <i class="fas fa-plus"></i>
                          </button>
                        </div>
                        <div class="text-right">
                          <div class="text-lg font-semibold text-gray-800" id="subtotal">
                            ₹<%= item.subtotal %>
                          </div>
                          <div class="text-sm text-gray-500">
                            ₹<%= item.price %> each
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                <% }); %>
              </div>
              <div class="mt-8 flex justify-end">
                <div class="text-xl font-bold text-gray-800" id="total">
                  Total: ₹<%= total %>
                </div>
              </div>
            <% } else { %>
              <div class="text-center py-8">
                <i class="fas fa-shopping-cart text-4xl text-gray-400 mb-4"></i>
                <p class="text-gray-500">Your cart is empty</p>
                <a href="/shop" class="inline-block mt-4 bg-black text-white px-6 py-2 rounded-lg hover:bg-gray-800">
                  Continue Shopping
                </a>
              </div>
            <% } %>
          </div>
        </div>

        <!-- Checkout Section (Left Side) -->
        <div class="w-1/4">
          <div class="bg-white p-6 rounded-2xl shadow-lg">
            <h2 class="text-xl font-bold text-gray-800 mb-6">Order Summary</h2>
            
            <!-- Price Details -->
            <div class="space-y-4 mb-6">
              <div class="flex justify-between text-gray-600">
                <span id="items-count">Subtotal (<%= cartItems.length %> items)</span>
                <span id="subtotal-amount">₹<%= total %></span>
              </div>
              <div class="flex justify-between text-gray-600">
                <span>Shipping</span>
                <span class="text-green-500">Free</span>
              </div>
            </div>

            <!-- Total -->
            <div class="border-t border-b py-4 mb-6">
              <div class="flex justify-between items-center">
                <span class="text-base font-medium text-gray-800">Total Amount</span>
                <span class="text-xl font-bold text-gray-800" id="total-amount">₹<%= total %></span>
              </div>
            </div>

            <!-- Checkout Button -->
            <% if (cartItems && cartItems.length > 0) { %>
              <button onclick="location.href='/checkout'" class="checkout-button w-full bg-black text-white py-3 rounded-xl font-medium hover:bg-gray-800 transition-all duration-300 ">
                Proceed to Checkout
              </button>
            <% } else { %>
              <button class="checkout-button w-full bg-gray-300 text-gray-500 py-3 rounded-xl font-medium cursor-not-allowed" disabled>
                Cart is Empty
              </button>
            <% } %>

            <!-- Additional Info -->
            <div class="mt-4 text-center text-xs text-gray-500">
              <p class="flex items-center justify-center gap-2">
                <i class="fas fa-shield-alt"></i>
                Secure Checkout
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <%- include('../partials/footer') %>

    <script>
      let updateTimeout;
      let isUpdating = false;

      async function updateQuantity(button, productId, action) {
        if (isUpdating) return;

        const cartItem = button.closest('.flex.items-center.border-b');
        const quantityDisplay = cartItem.querySelector('.quantity-display');
        const currentQuantity = parseInt(quantityDisplay.textContent);
        
        let newQuantity;
        if (action === 'increase') {
            if (currentQuantity >= 3) return;
            newQuantity = currentQuantity + 1;
        } else {
            if (currentQuantity <= 1) return;
            newQuantity = currentQuantity - 1;
        }

        // Update display immediately for smooth UX
        quantityDisplay.textContent = newQuantity;

        // Disable both buttons during update
        const buttons = cartItem.querySelectorAll('.quantity-btn');
        buttons.forEach(btn => btn.disabled = true);

        clearTimeout(updateTimeout);
        isUpdating = true;

        try {
            const response = await fetch('/cart/update-quantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId,
                    quantity: newQuantity
                })
            });

            const data = await response.json();

            if (response.ok) {
                // Update subtotal for this item
                const subtotalElement = cartItem.querySelector('#subtotal');
                subtotalElement.textContent = `₹${data.subtotal}`;
                
                const totalElement = document.querySelector('#total');
                if (totalElement) {
                    totalElement.textContent = `Total: ₹${data.total}`;
                }
                
                // Update checkout section
                document.getElementById('subtotal-amount').textContent = `₹${data.total}`;
                document.getElementById('total-amount').textContent = `₹${data.total}`;
                
                // Update button states
                const minusBtn = cartItem.querySelector('.quantity-btn:first-child');
                const plusBtn = cartItem.querySelector('.quantity-btn:last-child');
                
                minusBtn.disabled = newQuantity <= 1;
                plusBtn.disabled = newQuantity >= 3;

                // Success feedback
                button.classList.add('bg-green-200');
                setTimeout(() => {
                    button.classList.remove('bg-green-200');
                }, 300);

            } else {
                // Revert quantity on error
                quantityDisplay.textContent = currentQuantity;
                throw new Error(data.message);
            }
        } catch (error) {
            // Error feedback
            button.classList.add('bg-red-200');
            setTimeout(() => {
                button.classList.remove('bg-red-200');
            }, 300);

            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update quantity',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
        } finally {
            // Re-enable buttons
            buttons.forEach(btn => {
                btn.disabled = false;
                if (action === 'increase' && newQuantity >= 3) {
                    cartItem.querySelector('.quantity-btn:last-child').disabled = true;
                }
                if (action === 'decrease' && newQuantity <= 1) {
                    cartItem.querySelector('.quantity-btn:first-child').disabled = true;
                }
            });
            isUpdating = false;
        }
      }

      async function removeFromCart(button, productId) {
        // Show confirmation dialog
        const result = await Swal.fire({
            title: 'Remove Item?',
            text: 'Are you sure you want to remove this item from your cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#000000',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it',
            cancelButtonText: 'Cancel'
        });

        // If user confirms deletion
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/cart/remove/${productId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Item Removed',
                        text: data.message,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    // Reload the page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to remove item',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        }
      }
      
    </script>

    <style>
      .quantity-btn {
        transition: all 0.2s ease;
      }

      .quantity-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }

      .quantity-btn:not(:disabled):hover {
        transform: scale(1.05);
      }

      .quantity-btn:not(:disabled):active {
        transform: scale(0.95);
      }
    </style>
  </body>
</html>
